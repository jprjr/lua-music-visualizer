# dockerfile used for running valgrind, tests, etc

FROM ubuntu:18.04 as windows-builder

ENV LUAJIT_VER=2.1.0-beta3
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y gcc-multilib \
    mingw-w64 curl make patch build-essential git pkg-config

RUN mkdir -p /src && \
    cd /src && \
    git clone https://github.com/jprjr/iup-build.git iup
WORKDIR /src/iup

RUN \
    make TARGET=i686-w64-mingw32 clean && \
    make TARGET=x86_64-w64-mingw32 clean && \
    make TARGET=i686-w64-mingw32 && \
    make TARGET=i686-w64-mingw32 dist && \
    make TARGET=x86_64-w64-mingw32 && \
    make TARGET=x86_64-w64-mingw32 dist && \
    tar xzf output/lua-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/ftgl-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/freetype-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/zlib-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/im-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/cd-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/iup-i686-w64-mingw32.tar.gz -C /usr/i686-w64-mingw32 && \
    tar xzf output/lua-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    tar xzf output/ftgl-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    tar xzf output/freetype-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    tar xzf output/zlib-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    tar xzf output/im-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    tar xzf output/cd-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    tar xzf output/iup-x86_64-w64-mingw32.tar.gz -C /usr/x86_64-w64-mingw32 && \
    make TARGET=i686-w64-mingw32 clean && \
    make TARGET=x86_64-w64-mingw32 clean && \
    cd / && \
    rm -rf /src/iup

WORKDIR /

RUN mkdir -p /src && \
    cd /src && \
    curl -R -L -O http://luajit.org/download/LuaJIT-${LUAJIT_VER}.tar.gz && \
    tar xf LuaJIT-${LUAJIT_VER}.tar.gz && \
    cd LuaJIT-${LUAJIT_VER}/src && \
    make -j$(nproc) TARGET_SYS=Windows HOST_CC="gcc -m32" CROSS="i686-w64-mingw32-" libluajit.a && \
    cp lauxlib.h /usr/i686-w64-mingw32/include && \
    cp lua*.h /usr/i686-w64-mingw32/include && \
    cp libluajit.a /usr/i686-w64-mingw32/lib && \
    make clean && \
    make -j$(nproc) TARGET_SYS=Windows HOST_CC="gcc" CROSS="x86_64-w64-mingw32-" libluajit.a && \
    cp lauxlib.h /usr/x86_64-w64-mingw32/include && \
    cp lua*.h /usr/x86_64-w64-mingw32/include && \
    cp libluajit.a /usr/x86_64-w64-mingw32/lib && \
    make clean && \
    cd /src/LuaJIT-${LUAJIT_VER} && \
    make -j$(nproc) && \
    make install && \
    cd / && \
    rm -rf /src/LuaJIT-${LUAJIT_VER}

RUN apt-get install -y curl gnupg2 && \
    dpkg --add-architecture i386 && \
    curl -R -L -O https://dl.winehq.org/wine-builds/winehq.key && apt-key add winehq.key && \
    echo "deb https://dl.winehq.org/wine-builds/ubuntu/ bionic main" > /etc/apt/sources.list.d/winehq.list && \
    apt-get update

RUN apt-get install -y valgrind winehq-stable ffmpeg eyed3 flac unzip

RUN cd /usr/local/bin && \
    curl -R -L -O https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks && \
    chmod +x winetricks

ENV WINEARCH=win64
ENV WINEPREFIX=/wine64

RUN wineboot -u && winetricks win7

RUN mkdir -p "/wine64/drive_c/Program Files/ffmpeg" && cd "/wine64/drive_c/Program Files/ffmpeg" && \
    curl -R -L -O "https://ffmpeg.zeranoe.com/builds/win64/static/ffmpeg-4.2.1-win64-static.zip" && \
    unzip ffmpeg-4.2.1-win64-static.zip && \
    mv ffmpeg-4.2.1-win64-static/* ./ && \
    rm -rf ffmpeg-4.2.1-win64-static*

COPY . /src/lua-music-visualizer
WORKDIR /src/lua-music-visualizer

ENV UPX=true
ENV STRIP_FLAG=
ENV OPT_CFLAGS="-g -O0"

RUN \
    mkdir -p /dist/win32 && \
    mkdir -p /dist/win64 && \
    mkdir -p /dist/linux && \
    make -f Makefile.windows.docker TARGET=i686-w64-mingw32 OPT_CFLAGS="$OPT_CFLAGS" STRIP_FLAG="$STRIP_FLAG" UPX="$UPX" clean && \
    make -f Makefile.windows.docker TARGET=i686-w64-mingw32 OPT_CFLAGS="$OPT_CFLAGS" STRIP_FLAG="$STRIP_FLAG" UPX="$UPX" -j4 && \
    mv lua-music-visualizer.exe lua-music-visualizer-32.exe && \
    mv *.exe /dist/win32/ && \
    make -f Makefile.windows.docker TARGET=i686-w64-mingw32 OPT_CFLAGS="$OPT_CFLAGS" STRIP_FLAG="$STRIP_FLAG" UPX="$UPX" clean && \
    make -f Makefile.windows.docker TARGET=x86_64-w64-mingw32 OPT_CFLAGS="$OPT_CFLAGS" STRIP_FLAG="$STRIP_FLAG" UPX="$UPX" -j4 && \
    mv lua-music-visualizer.exe lua-music-visualizer-64.exe && \
    mv *.exe /dist/win64/ && \
    make -f Makefile.windows.docker TARGET=x86_64-w64-mingw32 clean && \
    make OPT_CFLAGS="$OPT_CFLAGS" STRIP_FLAG="$STRIP_FLAG" && \
    mv lua-music-visualizer /dist/linux && \
    make clean && \
    mv -v /dist/win32/*.exe ./ && \
    mv -v /dist/win64/*.exe ./ && \
    mv -v /dist/linux/lua-music-visualizer ./

RUN mkdir -p "/wine64/drive_c/Program Files/misc/bin" && cd "/wine64/drive_c/Program Files/misc/bin" && \
    x86_64-w64-mingw32-gcc -Wall -Wextra -o nullcat.exe /src/lua-music-visualizer/aux/nullcat.c && \
    mkdir -p /data && \
    cd /data && \
    ffmpeg -ar 48000 -ac 2 -f s16le -i /dev/zero -to 10 test.flac && \
    metaflac --set-tag="TITLE=Some Title" --set-tag="ARTIST=Some Artist" --set-tag="ALBUM=Some Album" test.flac && \
    ffmpeg -i test.flac test.mp3 && \
    ffmpeg -i test.flac test.ogg && \
    ffmpeg -i test.flac -f s16le test.pcm

ENV WINEPATH="C:\Program Files\ffmpeg\bin;C:\Program Files\misc\bin"
